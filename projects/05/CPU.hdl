// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        Mux16(a=instruction,b=ALUoutTemp,sel=instruction[15],out=muxRes);
        
        Not(in=instruction[15],out=norInstruction);
        Or(a=instruction[5],b=norInstruction,out=loadA);
        ARegister(in=muxRes,load=loadA,out=Aout,out[0..14]=addressM);

        Mux16(a=Aout,b=inM,sel=instruction[12],out=y);

        
        And(a=instruction[15],b=instruction[6],out=no);
        And(a=instruction[7],b=instruction[15],out=f);
        Or(a=instruction[9],b=norInstruction,out=zy);
        And(a=instruction[15],b=instruction[11],out=zx);
        Or(a=instruction[8],b=norInstruction,out=ny);
        And(a=instruction[15],b=instruction[10],out=nx);

        ALU(
            x=x,
            y=y,
            zx=zx,
            nx=nx,
            zy=zy,
            ny=ny,
            f=f,
            no=no,
            out=outM,
            out=ALUoutTemp,
            zr=zr,
            ng=ng);

        Not(in=zr, out=Nzr);
        Not(in=ng, out=Nng);
        And(a=Nzr, b=Nng, out=mv);
    

        And(a=instruction[2],b=ng,out=out2);
        And(a=instruction[1],b=zr,out=out1);
        And(a=instruction[0],b=mv,out=out3);
        Or(a=out2,b=out3,out=orer);
        Or(a=orer,b=out1,out=orer1);
        And(a=instruction[15],b=orer1,out=mv2);


        And(a=instruction[3],b=instruction[15],out=writeM);
        PC(in=Aout,load=mv2,reset=reset,inc=true,out[0..14]=pc);
        

        And(a=instruction[15],b=instruction[4],out=loadD);
        DRegister(in=ALUoutTemp,load=loadD,out=x);
}