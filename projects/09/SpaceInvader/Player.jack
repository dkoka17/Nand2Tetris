
class Player {

   field int x; 
   field int size;
   field int shooting;
   field int bulletX;
   field int bulletY;
    
   constructor Player new() {
      let x = 0;
      let size = 16;
      let shooting = 0;
      let bulletY =  6144;
      let bulletX = 0;
      do draw(6656);
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   
   method void draw(int location) {
       var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 960);
        do Memory.poke(memAddress+256, 960);
        do Memory.poke(memAddress+288, 4080);
        do Memory.poke(memAddress+320, 4080);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, -1);
        do Memory.poke(memAddress+416, -1);
        do Memory.poke(memAddress+448, -1);
        do Memory.poke(memAddress+480, 0);
        return;
   }

   
   method void erase(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
   }

  method void moveLeft() {
      if (x > 0) {
         do erase(6656+x);
         let x = x - 1;
        do draw(6656+x);
      }
      return;
   }

 method void moveRight() {

      if (x < 31) {
          do erase(6656+x);
         let x = x + 1;
        do draw(6656+x);
      }
      return;
   }

   method void drawBullet(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 960);
        do Memory.poke(memAddress+384, 2016);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 384);
        do Memory.poke(memAddress+480, 2016);
        return;
}


   method void shoot() {
     if (shooting = 0) {
         let bulletX = x;
        let  shooting = 1;
        do drawBullet(bulletX+bulletY);
      }
      return;
   }

   method void moveBullet() {
     if (shooting = 1) {
        do erase(bulletX+bulletY);
        let bulletY = bulletY - 32;
        if(bulletX+bulletY >0){
            do drawBullet(bulletX+bulletY);
         }else{
            let shooting = 0; 
            let bulletY =  6144;
            let bulletX = 0;  
         }
     }
      return;
   }

   method void bulletErase() {
        do erase(bulletX+bulletY);
        let shooting = 0; 
        let bulletY =  6144;
        let bulletX = 0;
      return;
   }

   method int getBulletX() {
        if (shooting = 1) {
            return bulletX;
        }
        return -1;
    }
    method int getBulletY() {
        if (shooting = 1) {
            return  (bulletY - 32)/32;
        }
        return -1;
    }
}

