// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[1] = 14333; 
        let heap[0] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointre;
        var int szNew;
        var int nxt;
        var int prv;
        let nxt = heap;
        let prv = heap;
        while (nxt[1] < size) { // First fit
            if (nxt[0] = 0) {   // Not enough memory on the heap
                do Sys.error(1);    // TODO defragment
            }
            let prv = nxt;
            let nxt = nxt[0];
        }
        let szNew = nxt[1] - size - 2;
        if (szNew < 1) {
            let prv[0] = nxt[0];
            let pointre = nxt;
        } else {
            let pointre = nxt+szNew+1;
            let nxt[1] = szNew;
            let ram[pointre + 1] = size;
        }
        return pointre + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int nxt;
        let nxt = heap;
        while (~(nxt[0] = 0)) {
            let nxt = nxt[0];
        }
        let nxt[0] = object - 2;
        let object[-2] = 0;
        return;
    }    

    function void memset(Array object, int value, int num) {
        var int i;
        let i = 0;
        while (i < num) {
            let object[i] = num;
            let i = i + 1;
        }
        return;
    }
}
