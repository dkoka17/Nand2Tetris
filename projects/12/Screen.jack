// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array filledScr; 
    static Array revScr; 
    static Array screen;
    static Array tmpArra;
    

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let tmpArra = Array.new(16);
        let filledScr = Array.new(16);
        let revScr = Array.new(16);
        let tmpArra[0] = 1;
        let filledScr[0] = 0;
        let revScr[0] = -1;
        var int i;
        var int saver;
        let i = 1;
        while (i < 16) {
            let saver = tmpArra[i - 1];
            let tmpArra[i] = saver + saver;
            let saver = filledScr[i - 1];
            let filledScr[i] = saver + saver + 1;
            let revScr[i] = ~filledScr[i];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 8192;
        while (~(i < 0)) {
            let screen[i] = 0;
            let i = i - 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pointer;
        let pointer = (x / 16) + (y * 32);
        var int saver;
        let saver = tmpArra[x & 15];
        if (color) {
            let screen[pointer] = screen[pointer] | saver;
        } else {
            let screen[pointer] = screen[pointer] & (~saver);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int pointer;
        var int saver;
        if (y1 = y2) {
            if (x1 > x2) {
                let saver = x1;
                let x1 = x2;
                let x2 = saver;
            }
            if (x1 + 16 > x2) {
                while (~(x1 > x2)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
                return;
            }
            let pointer = (y1 * 32) + (x1 / 16);
            if (color) {
                let saver = x1 & 15;
                if (~(saver = 0)) {
                    let screen[pointer] = screen[pointer] | revScr[saver];
                    let x1 = x1 + 16 - saver;
                    let pointer = pointer + 1;
                }
                while (~(x1 + 16 > x2)) {
                    let screen[pointer] = -1;
                    let x1 = x1 + 16;
                    let pointer = pointer + 1;
                }
                let saver = x2 & 15;
                if (saver = 15) {
                    let screen[pointer] = -1;
                } else {
                    if (~(saver = 0)) {
                        let screen[pointer] = screen[pointer] | filledScr[saver+1];
                    }
                }
            } else {
                let saver = x1 & 15;
                if (~(saver = 0)) {
                    let screen[pointer] = screen[pointer] & filledScr[saver];
                    let x1 = x1 + 16 - saver;
                    let pointer = pointer + 1;
                }
                while (~(x1 + 16 > x2)) {
                    let screen[pointer] = 0;
                    let x1 = x1 + 16;
                    let pointer = pointer + 1;
                }
                let saver = x2 & 15;
                if (saver = 15) {
                    let screen[pointer] = 0;
                } else {
                    let screen[pointer] = screen[pointer] & revScr[saver+1];
                }
            }
        } else {
            if (x1 = x2) {
                if (y1 > y2) {
                    let saver = y1;
                    let y1 = y2;
                    let y2 = saver;
                }
                while (~(y1 > y2)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            } else {
                var int aNew;
                var int bNew;
                var int chg;
                var int moveX;
                var int move;
                let moveX = x2 - x1;
                let move = y2 - y1;
                let aNew = 0;
                let bNew = 0;
                let chg = 0;
                if (move < 0) {
                    if (moveX < 0) {
                        while (~((aNew < moveX) | (bNew < move))) { 
                            do Screen.drawPixel(x1 + aNew, y1 + bNew);
                            if (chg < 0) {
                                let aNew = aNew - 1;
                                let chg = chg - move;
                            } else {
                                let bNew = bNew - 1;
                                let chg = chg + moveX;
                            }
                        }
                    } else {
                        while (~((aNew > moveX) | (bNew < move))) { 
                            do Screen.drawPixel(x1 + aNew, y1 + bNew);
                            if (chg < 0) {
                                let aNew = aNew + 1;
                                let chg = chg - move;
                            } else {
                                let bNew = bNew - 1;
                                let chg = chg - moveX;
                            }
                        }
                    }
                } else {
                    if (moveX < 0) {
                        while (~((aNew < moveX) | (bNew > move))) {
                            do Screen.drawPixel(x1 + aNew, y1 + bNew);
                            if (chg < 0) {
                                let aNew = aNew - 1;
                                let chg = chg + move;
                            } else {
                                let bNew = bNew + 1;
                                let chg = chg + moveX;
                            }
                        }
                    } else {
                        while (~((aNew > moveX) | (bNew > move))) { 
                            do Screen.drawPixel(x1 + aNew, y1 + bNew);
                            if (chg < 0) {
                                let aNew = aNew + 1;
                                let chg = chg + move;
                            } else {
                                let bNew = bNew + 1;
                                let chg = chg - moveX;
                            }
                        }
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        var int ctr;
        var int added;
        var int svr;
        let i = -r;
        let svr = r * r;
        while (~(i > r)) {
            let ctr = Math.sqrt(svr - (i*i));
            let added = y+i;
            do Screen.drawLine(x - ctr, added, x + ctr, added);
            let i = i + 1;
        }
        return;
    }
}
